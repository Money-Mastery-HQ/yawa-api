openapi: 3.0.0
info:
  version: '0.17.1'
  title: Yawa Service
  description: Yawa REST API
servers:
  - url: /api

paths:
  /auth/login:
      post:
          summary: Authenticate user
          operationId: login
          tags:
              - authentication
          requestBody:
              required: true
              description: Create user authentication
              content:
                  'application/json':
                      schema:
                          $ref: '#/components/schemas/AuthenticateUserRequest'
          responses:
              200:
                  description: Ok
                  content:
                    'application/json':
                        schema:
                            $ref: '#/components/schemas/AuthenticationData'
              401:
                $ref: '#/components/responses/401Unauthorized'
              500:
                $ref: '#/components/responses/500InternalError'
  /auth/logout:
      delete:
          summary: Terminate user authentication
          operationId: logout
          security:
            - BasicAuth: []
              BearerAuth: []
          tags:
              - authentication
          responses:
              204:
                  description: Ok
              401:
                $ref: '#/components/responses/401Unauthorized'
              500:
                $ref: '#/components/responses/500InternalError'
  /users:
      post:
          summary: Register a user
          operationId: registerUser
          tags:
              - user
          requestBody:
              required: true
              description: User registration information
              content:
                  'application/json':
                      schema:
                          $ref: '#/components/schemas/CreateUserRecordRequest'
          responses:
              200:
                description: Created
                headers:
                    Location:
                        description: Url to user record
                        schema:
                            type: string
                content:
                    'application/json':
                        schema:
                            $ref: '#/components/schemas/AuthenticationData'
              400:
                $ref: '#/components/responses/400BadRequest'
              403:
                $ref: '#/components/responses/403Forbidden'
              500:
                $ref: '#/components/responses/500InternalError'
  /users/me:
      get:
          summary: Get authenticated user record
          operationId: getAuthenticatedUser
          security:
            - BasicAuth: [ ]
              BearerAuth: [ ]
          tags:
              - user
          responses:
              200:
                description: OK
                content:
                    'application/json':
                        schema:
                            $ref: '#/components/schemas/UserRecord'
              401:
                $ref: '#/components/responses/401Unauthorized'
              500:
                $ref: '#/components/responses/500InternalError'
      delete:
        summary: Delete user account
        operationId: deleteUser
        security:
          - BasicAuth: []
            BearerAuth: [ ]
        tags:
          - user
        responses:
          204:
            description: Ok
          401:
            $ref: '#/components/responses/401Unauthorized'
          500:
            $ref: '#/components/responses/500InternalError'
  /users/me/preferences:
      get:
        summary: Get authenticated user preferences
        operationId: getAuthenticatedUserPreferences
        security:
          - BasicAuth: []
            BearerAuth: [ ]
        tags:
          - user
        responses:
          200:
            description: Ok
            content:
              'application/json':
                schema:
                  $ref: '#/components/schemas/UserPreferencesRecord'
          401:
            $ref: '#/components/responses/401Unauthorized'
          500:
              $ref: '#/components/responses/500InternalError'
      put:
        summary: Update authenticated user preferences
        operationId: updateAuthenticatedUserPreferences
        security:
          - BasicAuth: [ ]
            BearerAuth: [ ]
        tags:
          - user
        requestBody:
          required: true
          description: User preferences update
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/UpdateUserPreferencesRequest'
        responses:
            204:
              description: OK
            400:
              $ref: '#/components/responses/400BadRequest'
            401:
              $ref: '#/components/responses/401Unauthorized'
            500:
              $ref: '#/components/responses/500InternalError'
  /users/me/preferences/basic:
    put:
      summary: Update authenticated user basic preferences
      operationId: updateAuthenticatedUserBasicPreferences
      security:
        - BasicAuth: [ ]
          BearerAuth: [ ]
      tags:
        - user
      requestBody:
        required: true
        description: Basic preferences info
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/UpdateUserBasicPreferencesRequest'
      responses:
        204:
          description: OK
        400:
          $ref: '#/components/responses/400BadRequest'
        401:
          $ref: '#/components/responses/401Unauthorized'
        500:
          $ref: '#/components/responses/500InternalError'
  /users/me/preferences/favorite-wallet:
    put:
      summary: Update authenticated user favorite wallet
      operationId: updateAuthenticatedUserFavoriteWallet
      security:
        - BasicAuth: [ ]
          BearerAuth: [ ]
      tags:
        - user
      parameters:
        - name: wallet
          in: query
          required: true
          schema:
            type: integer
            format: int64
      responses:
        204:
          description: OK
        401:
          $ref: '#/components/responses/401Unauthorized'
        500:
          $ref: '#/components/responses/500InternalError'
    delete:
      summary: Reset authenticated user favorite wallet
      operationId: resetAuthenticatedUserFavoriteWallet
      security:
        - BasicAuth: [ ]
          BearerAuth: [ ]
      tags:
        - user
      responses:
        204:
          description: OK
        401:
          $ref: '#/components/responses/401Unauthorized'
        500:
          $ref: '#/components/responses/500InternalError'
  /categories:
      post:
          summary: Create category
          operationId: createCategory
          security:
            - BasicAuth: [ ]
              BearerAuth: [ ]
          tags:
              - category
          requestBody:
              required: true
              description: Category to create
              content:
                  'application/json':
                      schema:
                          $ref: '#/components/schemas/CreateCategoryRecordRequest'
          responses:
              200:
                description: Created
                headers:
                    Location:
                        description: Url to category record
                        schema:
                            type: string
                content:
                  'application/json':
                    schema:
                      $ref: '#/components/schemas/ResourceIdentifier'
              400:
                $ref: '#/components/responses/400BadRequest'
              401:
                $ref: '#/components/responses/401Unauthorized'
              500:
                $ref: '#/components/responses/500InternalError'
      get:
        summary: Search category records
        operationId: getCategories
        security:
          - BasicAuth: [ ]
            BearerAuth: [ ]
        tags:
            - category
        responses:
            200:
                description: OK
                content:
                    'application/json':
                        schema:
                            type: array
                            items:
                                $ref: '#/components/schemas/CategoryRecord'
            401:
                $ref: '#/components/responses/401Unauthorized'
            500:
                $ref: '#/components/responses/500InternalError'
  /categories/{id}:
      get:
          summary: Get category record by ID
          operationId: getCategory
          security:
            - BasicAuth: [ ]
              BearerAuth: [ ]
          tags:
              - category
          parameters:
              - $ref: '#/components/parameters/idParam'
          responses:
              200:
                description: OK
                content:
                    'application/json':
                        schema:
                            $ref: '#/components/schemas/CategoryRecord'
              401:
                $ref: '#/components/responses/401Unauthorized'
              404:
                $ref: '#/components/responses/404ItemNotFound'
              500:
                $ref: '#/components/responses/500InternalError'
      put:
          summary: Update category record by ID
          operationId: updateCategory
          security:
            - BasicAuth: [ ]
              BearerAuth: [ ]
          tags:
              - category
          parameters:
              - $ref: '#/components/parameters/idParam'
          requestBody:
              required: true
              description: New category info
              content:
                  'application/json':
                      schema:
                        $ref: '#/components/schemas/UpdateCategoryRecordRequest'
          responses:
            204:
                description: OK
            400:
                $ref: '#/components/responses/400BadRequest'
            401:
                $ref: '#/components/responses/401Unauthorized'
            404:
                $ref: '#/components/responses/404ItemNotFound'
            500:
                $ref: '#/components/responses/500InternalError'
      delete:
          summary: Delete category record by ID
          operationId: deleteCategory
          security:
            - BasicAuth: [ ]
              BearerAuth: [ ]
          tags:
              - category
          parameters:
              - $ref: '#/components/parameters/idParam'
          responses:
              204:
                description: OK
              401:
                $ref: '#/components/responses/401Unauthorized'
              404:
                $ref: '#/components/responses/404ItemNotFound'
              500:
                $ref: '#/components/responses/500InternalError'
  /categories/{id}/transactions:
    get:
      summary: Get category transaction records sorting by date descending
      operationId: getCategoryTransactions
      security:
        - BasicAuth: [ ]
          BearerAuth: [ ]
      tags:
        - event
      parameters:
        - $ref: '#/components/parameters/idParam'
        - name: page
          in: query
          required: false
          schema:
            minimum: 0
            type: integer
            format: int32
            default: 0
            example: 0
        - name: size
          in: query
          required: false
          description: The number of items to return
          schema:
            minimum: 1
            maximum: 200
            type: integer
            format: int32
            default: 50
            example: 50
        - name: from
          in: query
          required: false
          schema:
            type: string
            format: date-time
            example: 2021-12-08T22:50+03:00
        - name: to
          in: query
          required: false
          schema:
            type: string
            format: date-time
            example: 2021-12-08T22:50+03:00
      responses:
        200:
          description: OK
          headers:
            X-Total-Count:
              schema:
                type: integer
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/TransactionPage'
        401:
          $ref: '#/components/responses/401Unauthorized'
        500:
          $ref: '#/components/responses/500InternalError'
  /transactions:
      post:
          summary: Create transaction record
          operationId: createTransaction
          security:
            - BasicAuth: [ ]
              BearerAuth: [ ]
          tags:
              - transaction
          requestBody:
              required: true
              description: Transaction to create
              content:
                  'application/json':
                      schema:
                          $ref: '#/components/schemas/CreateTransactionRecordRequest'
          responses:
              200:
                description: Created
                headers:
                    Location:
                        description: Url to transaction record
                        schema:
                            type: string
                content:
                  'application/json':
                    schema:
                      $ref: '#/components/schemas/ResourceIdentifier'
              400:
                $ref: '#/components/responses/400BadRequest'
              401:
                $ref: '#/components/responses/401Unauthorized'
              500:
                $ref: '#/components/responses/500InternalError'
      get:
        summary: Search transaction records sorting by date descending
        operationId: getTransactions
        security:
          - BasicAuth: [ ]
            BearerAuth: [ ]
        tags:
            - transaction
        parameters:
            - name: page
              in: query
              required: false
              schema:
                  minimum: 0
                  type: integer
                  format: int32
                  default: 0
                  example: 0
            - name: size
              in: query
              required: false
              description: The number of items to return
              schema:
                  minimum: 1
                  maximum: 200
                  type: integer
                  format: int32
                  default: 50
                  example: 50
            - name: from
              in: query
              required: false
              schema:
                  type: string
                  format: date-time
                  example: 2021-12-08T22:50+03:00
            - name: to
              in: query
              required: false
              schema:
                  type: string
                  format: date-time
                  example: 2021-12-08T22:50+03:00
            - name: wallet
              in: query
              required: false
              schema:
                  type: array
                  items:
                    type: integer
                    format: int64
            - name: tag
              in: query
              required: false
              schema:
                type: array
                items:
                  type: string
            - name: payee
              in: query
              required: false
              schema:
                type: array
                items:
                  type: string
        responses:
            200:
                description: OK
                headers:
                    X-Total-Count:
                        schema:
                            type: integer
                content:
                    'application/json':
                        schema:
                            $ref: '#/components/schemas/TransactionPage'
            401:
                $ref: '#/components/responses/401Unauthorized'
            500:
                $ref: '#/components/responses/500InternalError'
  /transactions/{id}:
      get:
          summary: Get transaction record by ID
          operationId: getTransaction
          security:
            - BasicAuth: [ ]
              BearerAuth: [ ]
          tags:
              - transaction
          parameters:
              - $ref: '#/components/parameters/idParam'
          responses:
              200:
                description: OK
                content:
                    'application/json':
                        schema:
                            $ref: '#/components/schemas/TransactionRecord'
              401:
                $ref: '#/components/responses/401Unauthorized'
              404:
                $ref: '#/components/responses/404ItemNotFound'
              500:
                $ref: '#/components/responses/500InternalError'
      put:
          summary: Update transaction record by ID
          operationId: updateTransaction
          security:
            - BasicAuth: [ ]
              BearerAuth: [ ]
          tags:
              - transaction
          parameters:
              - $ref: '#/components/parameters/idParam'
          requestBody:
              required: true
              description: New transaction info
              content:
                  'application/json':
                      schema:
                        $ref: '#/components/schemas/CreateTransactionRecordRequest'
          responses:
            204:
                description: OK
            400:
                $ref: '#/components/responses/400BadRequest'
            401:
                $ref: '#/components/responses/401Unauthorized'
            404:
                $ref: '#/components/responses/404ItemNotFound'
            500:
                $ref: '#/components/responses/500InternalError'
      delete:
          summary: Delete transaction record by ID
          operationId: deleteTransaction
          security:
            - BasicAuth: [ ]
              BearerAuth: [ ]
          tags:
              - transaction
          parameters:
              - $ref: '#/components/parameters/idParam'
          responses:
              204:
                description: OK
              401:
                $ref: '#/components/responses/401Unauthorized'
              404:
                $ref: '#/components/responses/404ItemNotFound'
              500:
                $ref: '#/components/responses/500InternalError'
  /transactions/payees:
    get:
      summary: Get payees
      operationId: getPayees
      security:
        - BasicAuth: [ ]
          BearerAuth: [ ]
      tags:
        - transaction
      responses:
        200:
          description: OK
          content:
            'application/json':
              schema:
                type: array
                items:
                  type: string
        401:
          $ref: '#/components/responses/401Unauthorized'
        500:
          $ref: '#/components/responses/500InternalError'
  /transactions/tags:
    get:
      summary: Get tags
      operationId: getTags
      security:
        - BasicAuth: [ ]
          BearerAuth: [ ]
      tags:
        - transaction
      responses:
        200:
          description: OK
          content:
            'application/json':
              schema:
                type: array
                items:
                  type: string
        401:
          $ref: '#/components/responses/401Unauthorized'
        500:
          $ref: '#/components/responses/500InternalError'
  /wallets:
      post:
          summary: Create wallet record
          operationId: createWallet
          security:
            - BasicAuth: [ ]
              BearerAuth: [ ]
          tags:
              - wallet
          requestBody:
              required: true
              description: Wallet to create
              content:
                  'application/json':
                      schema:
                          $ref: '#/components/schemas/CreateWalletRecordRequest'
          responses:
              200:
                description: Created
                headers:
                    Location:
                        description: Url to wallet record
                        schema:
                            type: string
                content:
                  'application/json':
                    schema:
                      $ref: '#/components/schemas/ResourceIdentifier'
              400:
                $ref: '#/components/responses/400BadRequest'
              401:
                $ref: '#/components/responses/401Unauthorized'
              500:
                $ref: '#/components/responses/500InternalError'
      get:
        summary: Search wallet records
        operationId: getWallets
        security:
          - BasicAuth: [ ]
            BearerAuth: [ ]
        tags:
            - wallet
        responses:
            200:
                description: OK
                content:
                    'application/json':
                        schema:
                            type: array
                            items:
                                $ref: '#/components/schemas/WalletRecord'
            401:
                $ref: '#/components/responses/401Unauthorized'
            500:
                $ref: '#/components/responses/500InternalError'
  /wallets/{id}:
      get:
          summary: Get wallet record by ID
          operationId: getWallet
          security:
            - BasicAuth: [ ]
              BearerAuth: [ ]
          tags:
              - wallet
          parameters:
              - $ref: '#/components/parameters/idParam'
          responses:
              200:
                description: OK
                content:
                    'application/json':
                        schema:
                            $ref: '#/components/schemas/WalletRecord'
              401:
                $ref: '#/components/responses/401Unauthorized'
              404:
                $ref: '#/components/responses/404ItemNotFound'
              500:
                $ref: '#/components/responses/500InternalError'
      put:
          summary: Update wallet record by ID
          operationId: updateWallet
          security:
            - BasicAuth: [ ]
              BearerAuth: [ ]
          tags:
              - wallet
          parameters:
              - $ref: '#/components/parameters/idParam'
          requestBody:
              required: true
              description: New wallet info
              content:
                  'application/json':
                      schema:
                        $ref: '#/components/schemas/UpdateWalletRecordRequest'
          responses:
            204:
                description: OK
            400:
                $ref: '#/components/responses/400BadRequest'
            401:
                $ref: '#/components/responses/401Unauthorized'
            404:
                $ref: '#/components/responses/404ItemNotFound'
            500:
                $ref: '#/components/responses/500InternalError'
      delete:
          summary: Delete wallet record by ID
          operationId: deleteWallet
          security:
            - BasicAuth: [ ]
              BearerAuth: [ ]
          tags:
              - wallet
          parameters:
              - $ref: '#/components/parameters/idParam'
          responses:
              204:
                description: OK
              401:
                $ref: '#/components/responses/401Unauthorized'
              404:
                $ref: '#/components/responses/404ItemNotFound'
              500:
                $ref: '#/components/responses/500InternalError'
  /wallets/{id}/transactions:
    get:
      summary: Get wallet transaction records sorting by date descending
      operationId: getWalletTransactions
      security:
        - BasicAuth: [ ]
          BearerAuth: [ ]
      tags:
        - event
      parameters:
        - $ref: '#/components/parameters/idParam'
        - name: page
          in: query
          required: false
          schema:
            minimum: 0
            type: integer
            format: int32
            default: 0
            example: 0
        - name: size
          in: query
          required: false
          description: The number of items to return
          schema:
            minimum: 1
            maximum: 200
            type: integer
            format: int32
            default: 50
            example: 50
        - name: from
          in: query
          required: false
          schema:
            type: string
            format: date-time
            example: 2021-12-08T22:50+03:00
        - name: to
          in: query
          required: false
          schema:
            type: string
            format: date-time
            example: 2021-12-08T22:50+03:00
      responses:
        200:
          description: OK
          headers:
            X-Total-Count:
              schema:
                type: integer
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/TransactionPage'
        401:
          $ref: '#/components/responses/401Unauthorized'
        500:
          $ref: '#/components/responses/500InternalError'
  /wallets/currencies:
      get:
          summary: Get supported currencies
          operationId: getCurrencies
          security:
            - BasicAuth: [ ]
              BearerAuth: [ ]
          tags:
            - wallet
          responses:
            200:
              description: OK
              content:
                'application/json':
                  schema:
                    type: array
                    items:
                      $ref: '#/components/schemas/CurrencyRecord'
            401:
              $ref: '#/components/responses/401Unauthorized'
            500:
              $ref: '#/components/responses/500InternalError'          
  /events:
      post:
          summary: Create event record
          operationId: createEvent
          security:
            - BasicAuth: [ ]
              BearerAuth: [ ]
          tags:
              - event
          requestBody:
              required: true
              description: Event to create
              content:
                  'application/json':
                      schema:
                          $ref: '#/components/schemas/CreateEventRecordRequest'
          responses:
              200:
                description: Created
                headers:
                    Location:
                        description: Url to event record
                        schema:
                            type: string
                content:
                  'application/json':
                    schema:
                      $ref: '#/components/schemas/ResourceIdentifier'
              400:
                $ref: '#/components/responses/400BadRequest'
              401:
                $ref: '#/components/responses/401Unauthorized'
              500:
                $ref: '#/components/responses/500InternalError'
      get:
        summary: Search event records
        operationId: getEvents
        security:
          - BasicAuth: [ ]
            BearerAuth: [ ]
        tags:
            - event
        parameters:
          - name: from
            in: query
            required: false
            schema:
              type: string
              format: date-time
              example: 2021-12-08T22:50+03:00
          - name: to
            in: query
            required: false
            schema:
              type: string
              format: date-time
              example: 2021-12-08T22:50+03:00
        responses:
            200:
                description: OK
                content:
                    'application/json':
                        schema:
                            type: array
                            items:
                                $ref: '#/components/schemas/EventRecord'
            401:
                $ref: '#/components/responses/401Unauthorized'
            500:
                $ref: '#/components/responses/500InternalError'
  /events/{id}:
      get:
          summary: Get event record by ID
          operationId: getEvent
          security:
            - BasicAuth: [ ]
              BearerAuth: [ ]
          tags:
              - event
          parameters:
              - $ref: '#/components/parameters/idParam'
          responses:
              200:
                description: OK
                content:
                    'application/json':
                        schema:
                            $ref: '#/components/schemas/EventRecord'
              401:
                $ref: '#/components/responses/401Unauthorized'
              404:
                $ref: '#/components/responses/404ItemNotFound'
              500:
                $ref: '#/components/responses/500InternalError'
      put:
          summary: Update event record by ID
          operationId: updateEvent
          security:
            - BasicAuth: [ ]
              BearerAuth: [ ]
          tags:
              - event
          parameters:
              - $ref: '#/components/parameters/idParam'
          requestBody:
              required: true
              description: New event info
              content:
                  'application/json':
                      schema:
                        $ref: '#/components/schemas/CreateEventRecordRequest'
          responses:
            204:
                description: OK
            400:
                $ref: '#/components/responses/400BadRequest'
            401:
                $ref: '#/components/responses/401Unauthorized'
            404:
                $ref: '#/components/responses/404ItemNotFound'
            500:
                $ref: '#/components/responses/500InternalError'
      delete:
          summary: Delete event record by ID
          operationId: deleteEvent
          security:
            - BasicAuth: [ ]
              BearerAuth: [ ]
          tags:
              - event
          parameters:
              - $ref: '#/components/parameters/idParam'
          responses:
              204:
                description: OK
              401:
                $ref: '#/components/responses/401Unauthorized'
              404:
                $ref: '#/components/responses/404ItemNotFound'
              500:
                $ref: '#/components/responses/500InternalError'
  /events/{id}/transactions:
    get:
      summary: Get event transaction records sorting by date descending
      operationId: getEventTransactions
      security:
        - BasicAuth: [ ]
          BearerAuth: [ ]
      tags:
        - event
      parameters:
        - $ref: '#/components/parameters/idParam'
        - name: page
          in: query
          required: false
          schema:
            minimum: 0
            type: integer
            format: int32
            default: 0
            example: 0
        - name: size
          in: query
          required: false
          description: The number of items to return
          schema:
            minimum: 1
            maximum: 200
            type: integer
            format: int32
            default: 50
            example: 50
        - name: from
          in: query
          required: false
          schema:
            type: string
            format: date-time
            example: 2021-12-08T22:50+03:00
        - name: to
          in: query
          required: false
          schema:
            type: string
            format: date-time
            example: 2021-12-08T22:50+03:00
      responses:
        200:
          description: OK
          headers:
            X-Total-Count:
              schema:
                type: integer
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/TransactionPage'
        401:
          $ref: '#/components/responses/401Unauthorized'
        500:
          $ref: '#/components/responses/500InternalError'
  /data-exports:
    post:
      summary: Request data export
      operationId: requestDataExport
      security:
        - BasicAuth: [ ]
          BearerAuth: [ ]
      tags:
        - data-export
      responses:
        200:
          description: Requested
          headers:
            Location:
              description: Url to data export request
              schema:
                type: string
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ResourceIdentifier'
        400:
          $ref: '#/components/responses/400BadRequest'
        401:
          $ref: '#/components/responses/401Unauthorized'
        500:
          $ref: '#/components/responses/500InternalError'
    get:
      summary: Search data exports
      operationId: getDataExports
      security:
        - BasicAuth: [ ]
          BearerAuth: [ ]
      tags:
        - data-export
      responses:
        200:
          description: OK
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DataExportRecord'
        401:
          $ref: '#/components/responses/401Unauthorized'
        500:
          $ref: '#/components/responses/500InternalError'
  /data-exports/{id}:
    delete:
      summary: Delete data export by ID
      operationId: deleteDataExport
      security:
        - BasicAuth: [ ]
          BearerAuth: [ ]
      tags:
        - data-export
      parameters:
        - $ref: '#/components/parameters/idParam'
      responses:
        204:
          description: OK
        401:
          $ref: '#/components/responses/401Unauthorized'
        404:
          $ref: '#/components/responses/404ItemNotFound'
        500:
          $ref: '#/components/responses/500InternalError'
  /automatic-rules:
    post:
      summary: Create automatic rule
      operationId: createAutomaticRule
      security:
        - BasicAuth: [ ]
          BearerAuth: [ ]
      tags:
        - automatic-rule
      requestBody:
        required: true
        description: Automatic rule to create
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/CreateAutomaticRuleRecordRequest'
      responses:
        200:
          description: Requested
          headers:
            Location:
              description: Url to automatic-rule
              schema:
                type: string
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ResourceIdentifier'
        400:
          $ref: '#/components/responses/400BadRequest'
        401:
          $ref: '#/components/responses/401Unauthorized'
        500:
          $ref: '#/components/responses/500InternalError'
    get:
      summary: Search automatic rules
      operationId: getAutomaticRules
      security:
        - BasicAuth: [ ]
          BearerAuth: [ ]
      tags:
        - automatic-rule
      responses:
        200:
          description: OK
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AutomaticRuleRecord'
        401:
          $ref: '#/components/responses/401Unauthorized'
        500:
          $ref: '#/components/responses/500InternalError'
  /automatic-rules/{id}:
    put:
      summary: Update automatic rule record by ID
      operationId: updateAutomaticRule
      security:
        - BasicAuth: [ ]
          BearerAuth: [ ]
      tags:
        - automatic-rule
      parameters:
        - $ref: '#/components/parameters/idParam'
      requestBody:
        required: true
        description: New automatic rule info
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/CreateAutomaticRuleRecordRequest'
      responses:
        204:
          description: OK
        400:
          $ref: '#/components/responses/400BadRequest'
        401:
          $ref: '#/components/responses/401Unauthorized'
        404:
          $ref: '#/components/responses/404ItemNotFound'
        500:
          $ref: '#/components/responses/500InternalError'
    delete:
      summary: Delete automatic rule by ID
      operationId: deleteAutomaticRule
      security:
        - BasicAuth: [ ]
          BearerAuth: [ ]
      tags:
        - automatic-rule
      parameters:
        - $ref: '#/components/parameters/idParam'
      responses:
        204:
          description: OK
        401:
          $ref: '#/components/responses/401Unauthorized'
        404:
          $ref: '#/components/responses/404ItemNotFound'
        500:
          $ref: '#/components/responses/500InternalError'
  /budgets:
    post:
      summary: Create budget
      operationId: createBudget
      security:
        - BasicAuth: [ ]
          BearerAuth: [ ]
      tags:
        - budget
      requestBody:
        required: true
        description: Budget to create
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/CreateBudgetRecordRequest'
      responses:
        200:
          description: Requested
          headers:
            Location:
              description: Url to budget
              schema:
                type: string
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ResourceIdentifier'
        400:
          $ref: '#/components/responses/400BadRequest'
        401:
          $ref: '#/components/responses/401Unauthorized'
        500:
          $ref: '#/components/responses/500InternalError'
    get:
      summary: Search budgets
      operationId: getBudgets
      security:
        - BasicAuth: [ ]
          BearerAuth: [ ]
      tags:
        - budget
      responses:
        200:
          description: OK
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BudgetRecord'
        401:
          $ref: '#/components/responses/401Unauthorized'
        500:
          $ref: '#/components/responses/500InternalError'
  /budgets/{id}:
    put:
      summary: Update budget record by ID
      operationId: updateBudget
      security:
        - BasicAuth: [ ]
          BearerAuth: [ ]
      tags:
        - budget
      parameters:
        - $ref: '#/components/parameters/idParam'
      requestBody:
        required: true
        description: New budget info
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/UpdateBudgetRecordRequest'
      responses:
        204:
          description: OK
        400:
          $ref: '#/components/responses/400BadRequest'
        401:
          $ref: '#/components/responses/401Unauthorized'
        404:
          $ref: '#/components/responses/404ItemNotFound'
        500:
          $ref: '#/components/responses/500InternalError'
    delete:
      summary: Delete budget by ID
      operationId: deleteBudget
      security:
        - BasicAuth: [ ]
          BearerAuth: [ ]
      tags:
        - budget
      parameters:
        - $ref: '#/components/parameters/idParam'
      responses:
        204:
          description: OK
        401:
          $ref: '#/components/responses/401Unauthorized'
        404:
          $ref: '#/components/responses/404ItemNotFound'
        500:
          $ref: '#/components/responses/500InternalError'
components:
  schemas:
    ResourceIdentifier:
      type: object
      required:
        - id
      properties:
        id:
          type: integer
          format: int64
    AuthenticateUserRequest:
        type: object
        required:
            - email
            - password
        properties:
            email:
              type: string
              example: iivanov@gmail.com
            password:
                type: string
                example: qwerty1234
    AuthenticationData:
        type: object
        required:
            - token
        properties:
            token:
                type: string
                example: gkjdsxcvbnjtrdcvxcbnhgfdcv
    UserRecord:
      type: object
      required:
        - id
        - email
        - preferences
        - experiments
      properties:
        id:
          type: integer
          format: int64
          example: 1
        email:
          type: string
          example: iivanov@gmail.com
        preferences:
          $ref: '#/components/schemas/UserPreferencesRecord'
        experiments:
          type: array
          items:
            type: string
    UserPreferencesRecord:
      type: object
      required:
        - primaryCurrencyCode
        - timeZoneOffset
        - firstDayOfWeek
        - firstDayOfMonth
        - firstMonthOfYear
      properties:
        primaryCurrencyCode:
          $ref: '#/components/schemas/CurrencyCode'
        favoriteWallet:
          $ref: '#/components/schemas/MiniWalletRecord'
        timeZoneOffset:
          type: integer
          format: int32
          example: 10800
        firstDayOfWeek:
          type: integer
          format: int32
          example: 1
        firstDayOfMonth:
          type: integer
          format: int32
          example: 10
        firstMonthOfYear:
          type: integer
          format: int32
          example: 1
    TransactionRecord:
        type: object
        required:
          - id
          - amount
          - bookingDate
          - timestamp
          - processingTimestamp
          - income
          - hidden
          - category
          - wallet
        properties:
            id:
                type: integer
                format: int64
                example: 1
            amount:
                type: number
                format: float
                example: 4.2
            income:
                type: boolean
                example: true
            bookingDate:
              type: string
              format: date-time
            timestamp:
                type: string
                format: date-time
            valueDate:
              type: string
              format: date-time
            processingTimestamp:
                type: string
                format: date-time
            tag:
                type: string
                example: work
            note:
                type: string
            hidden:
              type: boolean
              example: false
            category:
              $ref: '#/components/schemas/MiniCategoryRecord'
            wallet:
              $ref: '#/components/schemas/MiniWalletRecord'
            event:
              $ref: '#/components/schemas/MiniEventRecord'
            payee:
              type: string
            amountConversion:
              $ref: '#/components/schemas/AmountConversion'
            externalId:
              type: string
    MiniCategoryRecord:
        type: object
        required:
          - id
          - name
          - archived
          - income
        properties:
            id:
                type: integer
                format: int64
                example: 1
            name:
                type: string
                example: Taxi
            archived:
                type: boolean
                example: false
            income:
                type: boolean
                example: false
            internalType:
                $ref: '#/components/schemas/CategoryInternalType'
    CategoryRecord:
        type: object
        required:
          - id
          - name
          - archived
          - income
          - subCategories
        properties:
            id:
                type: integer
                format: int64
                example: 1
            name:
                type: string
                example: Taxi
            archived:
                type: boolean
                example: false
            income:
                type: boolean
                example: false
            description:
                type: string
            internalType:
                $ref: '#/components/schemas/CategoryInternalType'
            parent:
                $ref: '#/components/schemas/MiniCategoryRecord'
            subCategories:
                type: array
                items:
                    $ref: '#/components/schemas/CategoryRecord'
    CurrencyCode:
        type: string
        example: BYN
        enum:
            - BYN
            - EUR
            - USD
            - RUB
            - PLN
            - CZK
            - CNY
            - TRY
            - GEL
            - UZS
            - KZT
            - JPY
            - THB
            - BGN
            - HUF
            - RON
            - SEK
            - DKK
    CurrencyRecord:
      type: object
      required:
        - code
        - caption
      properties:
        code:
          $ref: '#/components/schemas/CurrencyCode'
        caption:
          type: string
          example: Euro
    CategoryInternalType:
        type: string
        example: OTHER
        enum:
            - OTHER
            - DEBT
            - REPAYMENT
    MiniWalletRecord:
        type: object
        required:
          - id
          - name
          - archived
          - currencyCode
        properties:
            id:
                type: integer
                format: int64
                example: 1
            name:
                type: string
                example: Cash
            archived:
              type: boolean
              example: false
            currencyCode:
              $ref: '#/components/schemas/CurrencyCode'
    WalletRecord:
        type: object
        required:
          - id
          - name
          - archived
          - currencyCode
          - balance
        properties:
            id:
                type: integer
                format: int64
                example: 1
            name:
                type: string
                example: Cash
            archived:
                type: boolean
                example: false
            currencyCode:
              $ref: '#/components/schemas/CurrencyCode'
            balance:
                type: number
                format: float
                example: 650
    MiniEventRecord:
        type: object
        required:
            - id
            - name
            - finished
        properties:
            id:
                type: integer
                format: int64
                example: 1
            name:
                type: string
                example: Mom's birthday
            finished:
                type: boolean
                example: false  
    EventRecord:
        type: object
        required:
            - id
            - name
            - finished
        properties:
            id:
                type: integer
                format: int64
                example: 1
            name:
                type: string
                example: Mom's birthday
            finished:
                type: boolean
                example: false
            groupName:
                type: string
    DataExportStatus:
      type: string
      example: PENDING
      enum:
        - PENDING
        - PROCESSING
        - ERROR
        - READY
    DataExportRecord:
      type: object
      required:
        - id
        - untilDate
        - status
      properties:
        id:
          type: integer
          format: int64
          example: 1
        exportFileLink:
          type: string
        untilDate:
          type: string
          format: date-time
        status:
          $ref: '#/components/schemas/DataExportStatus'
    AutomaticRuleActionNoteType:
      type: string
      example: CUSTOM
      enum:
        - CUSTOM
        - ORIGINAL_NOTE
        - MATCHING_KEYWORD
    AutomaticRuleRecord:
      type: object
      required:
        - id
        - enabled
        - action
        - trigger
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        enabled:
          type: boolean
        trigger:
          $ref: '#/components/schemas/AutomaticRuleTrigger'
        action:
          type: object
          required:
            - category
            - hidden
            - noteType
          properties:
            category:
              $ref: '#/components/schemas/MiniCategoryRecord'
            event:
              $ref: '#/components/schemas/MiniEventRecord'
            hidden:
              type: boolean
            tag:
              type: string
            note:
              type: string
            noteType:
              $ref: '#/components/schemas/AutomaticRuleActionNoteType'
            payee:
              type: string
    AutomaticRuleTrigger:
      type: object
      required:
        - income
        - partial
        - keywords
      properties:
        keywords:
          type: array
          items:
            type: string
        income:
          type: boolean
        partial:
          type: boolean
          default: true
    BudgetType:
      type: string
      example: category
      enum:
        - event
        - category
    BudgetRecord:
      type: object
      required:
        - id
        - type
        - finished
        - type
        - limit
        - initialLimit
        - wallets
        - startDate
        - finishDate
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        finished:
          type: boolean
        type:
          $ref: '#/components/schemas/BudgetType'
        category:
          $ref: '#/components/schemas/MiniCategoryRecord'
        event:
          $ref: '#/components/schemas/MiniEventRecord'
        remark:
          type: string
        limit:
          type: number
          format: float
          example: 4.2
        initialLimit:
          type: number
          format: float
          example: 4.2
        wallets:
          type: array
          items:
            $ref: '#/components/schemas/MiniWalletRecord'
        startDate:
          type: string
          format: date
        finishDate:
          type: string
          format: date
    Problem:
      type: object
      required:
        - message
      properties:
        message:
          type: string
    CreateUserRecordRequest:
        type: object
        required:
          - email
          - password
          - timeZoneOffset
          - useDefaultCategories
        properties:
              email:
                  type: string
                  example: iivanov@gmail.com
              password:
                  type: string
                  example: qwerty1234
              primaryCurrencyCode:
                $ref: '#/components/schemas/CurrencyCode'
              timeZoneOffset:
                  type: integer
                  format: int32
                  example: 10800
              useDefaultCategories:
                  type: boolean
                  example: true
                  default: true
    AmountConversion:
      type: object
      required:
        - convertedAmount
        - targetCurrencyCode
      properties:
        convertedAmount:
          type: number
          format: float
        targetCurrencyCode:
          $ref: '#/components/schemas/CurrencyCode'
    TransactionPage:
      type: object
      required:
        - last
        - first
        - hasNext
        - hasPrevious
        - pageSize
        - pageNumber
        - totalPages
        - totalItems
        - items
      properties:
        last:
          type: boolean
        first:
          type: boolean
        hasNext:
          type: boolean
        hasPrevious:
          type: boolean
        pageSize:
          type: integer
          format: int32
        pageNumber:
          type: integer
          format: int32
        totalPages:
          type: integer
          format: int32
        totalItems:
          type: integer
          format: int64
        items:
          type: array
          items:
            $ref: '#/components/schemas/TransactionRecord'
    CreateTransactionRecordRequest:
        type: object
        required:
          - amount
          - timestamp
          - processingTimestamp
          - hidden
          - category
          - wallet
        properties:
              amount:
                  type: number
                  format: float
                  example: 4.2
              tag:
                  type: string
                  example: work
              note:
                  type: string
                  example: null
              bookingDate:
                type: string
                format: date-time
                example: 2024-02-08T20:50+03:00
              timestamp:
                  type: string
                  format: date-time
                  example: 2021-10-08T20:50+03:00
              valueDate:
                type: string
                format: date-time
                example: 2024-02-08T20:50+03:00
              processingTimestamp:
                type: string
                format: date-time
              hidden:
                type: boolean
                example: false
              category:
                  type: integer
                  format: int64
                  example: 1
              wallet:
                  type: integer
                  format: int64
                  example: 1
              event:
                  type: integer
                  format: int64
              payee:
                  type: string
              amountConversion:
                $ref: '#/components/schemas/AmountConversion'
              externalId:
                type: string
              correlationId:
                type: string
    CreateCategoryRecordRequest:
        type: object
        required:
          - name
          - income
          - archived
        properties:
              name:
                  type: string
                  example: Groceries
              income:
                  type: boolean
                  example: false
              archived:
                type: boolean
                example: false
                default: false
              description:
                type: string
              parentCategory:
                  type: integer
                  format: int64
                  example: 1
              correlationId:
                type: string
    UpdateCategoryRecordRequest:
        type: object
        required:
          - name
          - archived
        properties:
              name:
                  type: string
                  example: Groceries
              archived:
                  type: boolean
                  example: false
                  default: false
              description:
                  type: string
              parentCategory:
                  type: integer
                  format: int64
                  example: 1
    CreateWalletRecordRequest:
        type: object
        required:
          - name
          - archived
          - currencyCode
        properties:
              name:
                  type: string
                  example: Cash
              archived:
                  type: boolean
                  default: false
              currencyCode:
                $ref: '#/components/schemas/CurrencyCode'
              initialBalance:
                  type: number
                  format: float
                  example: 4.2
              correlationId:
                type: string
    UpdateWalletRecordRequest:
        type: object
        required:
          - name
          - archived
          - currencyCode
        properties:
              name:
                  type: string
                  example: Cash
              archived:
                type: boolean
                default: false
              currencyCode:
                  $ref: '#/components/schemas/CurrencyCode'
    CreateEventRecordRequest:
        type: object
        required:
            - name
            - finished
        properties:
            name:
                type: string
                example: Dad's birthday
            finished:
                type: boolean
                example: true
            groupName:
                type: string
            correlationId:
              type: string
    UpdateUserPreferencesRequest:
      type: object
      required:
        - timeZoneOffset
        - firstDayOfWeek
        - firstDayOfMonth
        - firstMonthOfYear
      properties:
        primaryCurrencyCode:
          $ref: '#/components/schemas/CurrencyCode'
        favoriteWallet:
          type: integer
          format: int64
        timeZoneOffset:
          type: integer
          format: int32
          example: 10800
        firstDayOfWeek:
          type: integer
          format: int32
          example: 1
        firstDayOfMonth:
          type: integer
          format: int32
          example: 10
        firstMonthOfYear:
          type: integer
          format: int32
          example: 1
    UpdateUserBasicPreferencesRequest:
      type: object
      required:
        - timeZoneOffset
        - firstDayOfWeek
        - firstDayOfMonth
        - firstMonthOfYear
      properties:
          timeZoneOffset:
            type: integer
            format: int32
            example: 10800
          firstDayOfWeek:
            type: integer
            format: int32
            example: 1
          firstDayOfMonth:
            type: integer
            format: int32
            example: 10
          firstMonthOfYear:
            type: integer
            format: int32
            example: 1
    CreateAutomaticRuleRecordRequest:
      type: object
      required:
        - enabled
        - action
        - trigger
      properties:
        name:
          type: string
        enabled:
          type: boolean
        trigger:
          $ref: '#/components/schemas/AutomaticRuleTrigger'
        action:
          type: object
          required:
            - category
            - hidden
          properties:
            category:
              type: integer
              format: int64
            event:
              type: integer
              format: int64
            hidden:
              type: boolean
            tag:
              type: string
            noteType:
              $ref: '#/components/schemas/AutomaticRuleActionNoteType'
            note:
              type: string
            payee:
              type: string
        correlationId:
          type: string
    CreateBudgetRecordRequest:
      type: object
      required:
        - limit
        - finished
        - type
        - startDate
        - finishDate
        - wallets
      properties:
        name:
          type: string
        finished:
          type: boolean
        type:
          $ref: '#/components/schemas/BudgetType'
        limit:
          type: number
          format: float
          example: 4.2
        initialLimit:
          type: number
          format: float
          example: 4.2
        startDate:
          type: string
          format: date
        finishDate:
          type: string
          format: date
        category:
          type: integer
          format: int64
        event:
          type: integer
          format: int64
        wallets:
          type: array
          items:
            type: integer
            format: int64
        remark:
          type: string
        correlationId:
          type: string
    UpdateBudgetRecordRequest:
      type: object
      required:
        - limit
        - finished
        - type
        - startDate
        - finishDate
        - wallets
      properties:
        name:
          type: string
        finished:
          type: boolean
        type:
          $ref: '#/components/schemas/BudgetType'
        limit:
          type: number
          format: float
          example: 4.2
        startDate:
          type: string
          format: date
        finishDate:
          type: string
          format: date
        category:
          type: integer
          format: int64
        event:
          type: integer
          format: int64
        wallets:
          type: array
          items:
            type: integer
            format: int64
        remark:
          type: string
  parameters:
      idParam:
          name: id
          in: path
          required: true
          schema:
              type: integer
              format: int64
              example: 1
  responses:
      400BadRequest:
              description: Bad request
              content:
                'application/json':
                    schema:
                        $ref: '#/components/schemas/Problem'
      401Unauthorized:
          description: Unauthorized
          content:
            'application/json':
                schema:
                    $ref: '#/components/schemas/Problem'
      403Forbidden:
        description: Operation is forbidden
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/Problem'
      404ItemNotFound:
        description: Item not found
        content:
            'application/json':
                schema:
                    $ref: '#/components/schemas/Problem'
      500InternalError:
        description: Internal server error
        content:
            'application/json':
                schema:
                    $ref: '#/components/schemas/Problem'
  securitySchemes:
    BasicAuth:
      type: http
      scheme: basic
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
